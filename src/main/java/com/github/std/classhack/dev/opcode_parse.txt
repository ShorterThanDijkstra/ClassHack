{
    if((value & 0xff) == 0x32) {
        return new FixLengthOpcode("aaload", value, pos);
    if((value & 0xff) == 0x53) {
        return new FixLengthOpcode("aastore", value, pos);
    if((value & 0xff) == 0x1) {
        return new FixLengthOpcode("aconst_null", value, pos);
    if((value & 0xff) == 0x19) {
        return new FixLengthOpcode("aload", value, new byte[]{values[pos + 1]},pos);
    if((value & 0xff) == 0x2a) {
        return new FixLengthOpcode("aload_0", value, pos);
    if((value & 0xff) == 0x2b) {
        return new FixLengthOpcode("aload_1", value, pos);
    if((value & 0xff) == 0x2c) {
        return new FixLengthOpcode("aload_2", value, pos);
    if((value & 0xff) == 0x2d) {
        return new FixLengthOpcode("aload_3", value, pos);
    if((value & 0xff) == 0xbd) {
        return new FixLengthOpcode("anewarray", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0xb0) {
        return new FixLengthOpcode("areturn", value, pos);
    if((value & 0xff) == 0xbe) {
        return new FixLengthOpcode("arraylength", value, pos);
    if((value & 0xff) == 0x3a) {
        return new FixLengthOpcode("astore", value, new byte[]{values[pos + 1]},pos);
    if((value & 0xff) == 0x4c) {
        return new FixLengthOpcode("astore_1", value, pos);
    if((value & 0xff) == 0x4d) {
        return new FixLengthOpcode("astore_2", value, pos);
    if((value & 0xff) == 0x4e) {
        return new FixLengthOpcode("astore_3", value, pos);
    if((value & 0xff) == 0xbf) {
        return new FixLengthOpcode("athrow", value, pos);
    if((value & 0xff) == 0x33) {
        return new FixLengthOpcode("baload", value, pos);
    if((value & 0xff) == 0x54) {
        return new FixLengthOpcode("bastore", value, pos);
    if((value & 0xff) == 0x10) {
        return new FixLengthOpcode("bipush", value, new byte[]{values[pos + 1]},pos);
    if((value & 0xff) == 0x34) {
        return new FixLengthOpcode("caload", value, pos);
    if((value & 0xff) == 0x55) {
        return new FixLengthOpcode("castore", value, pos);
    if((value & 0xff) == 0xc0) {
        return new FixLengthOpcode("checkcast", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0x90) {
        return new FixLengthOpcode("d2f", value, pos);
    if((value & 0xff) == 0x8e) {
        return new FixLengthOpcode("d2i", value, pos);
    if((value & 0xff) == 0x8f) {
        return new FixLengthOpcode("d2l", value, pos);
    if((value & 0xff) == 0x63) {
        return new FixLengthOpcode("dadd", value, pos);
    if((value & 0xff) == 0x31) {
        return new FixLengthOpcode("daload", value, pos);
    if((value & 0xff) == 0x52) {
        return new FixLengthOpcode("dastore", value, pos);
    if((value & 0xff) == 0x98) {
        return new FixLengthOpcode("dcmpg", value, pos);
    if((value & 0xff) == 0x97) {
        return new FixLengthOpcode("dcmpl", value, pos);
    if((value & 0xff) == 0xe) {
        return new FixLengthOpcode("dconst_0", value, pos);
    if((value & 0xff) == 0xf) {
        return new FixLengthOpcode("dconst_1", value, pos);
    if((value & 0xff) == 0x6f) {
        return new FixLengthOpcode("ddiv", value, pos);
    if((value & 0xff) == 0x18) {
        return new FixLengthOpcode("dload", value, new byte[]{values[pos + 1]},pos);
    if((value & 0xff) == 0x26) {
        return new FixLengthOpcode("dload_0", value, pos);
    if((value & 0xff) == 0x27) {
        return new FixLengthOpcode("dload_1", value, pos);
    if((value & 0xff) == 0x28) {
        return new FixLengthOpcode("dload_2", value, pos);
    if((value & 0xff) == 0x29) {
        return new FixLengthOpcode("dload_3", value, pos);
    if((value & 0xff) == 0x6b) {
        return new FixLengthOpcode("dmul", value, pos);
    if((value & 0xff) == 0x77) {
        return new FixLengthOpcode("dneg", value, pos);
    if((value & 0xff) == 0x73) {
        return new FixLengthOpcode("drem", value, pos);
    if((value & 0xff) == 0xaf) {
        return new FixLengthOpcode("dreturn", value, pos);
    if((value & 0xff) == 0x39) {
        return new FixLengthOpcode("dstore", value, new byte[]{values[pos + 1]},pos);
    if((value & 0xff) == 0x47) {
        return new FixLengthOpcode("dstore_0", value, pos);
    if((value & 0xff) == 0x48) {
        return new FixLengthOpcode("dstore_1", value, pos);
    if((value & 0xff) == 0x49) {
        return new FixLengthOpcode("dstore_2", value, pos);
    if((value & 0xff) == 0x4a) {
        return new FixLengthOpcode("dstore_3", value, pos);
    if((value & 0xff) == 0x67) {
        return new FixLengthOpcode("dsub", value, pos);
    if((value & 0xff) == 0x59) {
        return new FixLengthOpcode("dup", value, pos);
    if((value & 0xff) == 0x5a) {
        return new FixLengthOpcode("dup_x1", value, pos);
    if((value & 0xff) == 0x5b) {
        return new FixLengthOpcode("dup_x2", value, pos);
    if((value & 0xff) == 0x5c) {
        return new FixLengthOpcode("dup2", value, pos);
    if((value & 0xff) == 0x5d) {
        return new FixLengthOpcode("dup2_x1", value, pos);
    if((value & 0xff) == 0x5e) {
        return new FixLengthOpcode("dup2_x2", value, pos);
    if((value & 0xff) == 0x8d) {
        return new FixLengthOpcode("f2d", value, pos);
    if((value & 0xff) == 0x8b) {
        return new FixLengthOpcode("f2i", value, pos);
    if((value & 0xff) == 0x8c) {
        return new FixLengthOpcode("f2l", value, pos);
    if((value & 0xff) == 0x62) {
        return new FixLengthOpcode("fadd", value, pos);
    if((value & 0xff) == 0x30) {
        return new FixLengthOpcode("faload", value, pos);
    if((value & 0xff) == 0x51) {
        return new FixLengthOpcode("fastore", value, pos);
    if((value & 0xff) == 0x96) {
        return new FixLengthOpcode("fcmpg", value, pos);
    if((value & 0xff) == 0x95) {
        return new FixLengthOpcode("fcmpl", value, pos);
    if((value & 0xff) == 0xb) {
        return new FixLengthOpcode("fconst_0", value, pos);
    if((value & 0xff) == 0xc) {
        return new FixLengthOpcode("fconst_1", value, pos);
    if((value & 0xff) == 0xd) {
        return new FixLengthOpcode("fconst_2", value, pos);
    if((value & 0xff) == 0x6e) {
        return new FixLengthOpcode("fdiv", value, pos);
    if((value & 0xff) == 0x17) {
        return new FixLengthOpcode("fload", value, new byte[]{values[pos + 1]},pos);
    if((value & 0xff) == 0x22) {
        return new FixLengthOpcode("fload_0", value, pos);
    if((value & 0xff) == 0x23) {
        return new FixLengthOpcode("fload_1", value, pos);
    if((value & 0xff) == 0x24) {
        return new FixLengthOpcode("fload_2", value, pos);
    if((value & 0xff) == 0x25) {
        return new FixLengthOpcode("fload_3", value, pos);
    if((value & 0xff) == 0x6a) {
        return new FixLengthOpcode("fmul", value, pos);
    if((value & 0xff) == 0x76) {
        return new FixLengthOpcode("fneg", value, pos);
    if((value & 0xff) == 0x72) {
        return new FixLengthOpcode("frem", value, pos);
    if((value & 0xff) == 0xae) {
        return new FixLengthOpcode("freturn", value, pos);
    if((value & 0xff) == 0x38) {
        return new FixLengthOpcode("fstore", value, new byte[]{values[pos + 1]},pos);
    if((value & 0xff) == 0x43) {
        return new FixLengthOpcode("fstore_0", value, pos);
    if((value & 0xff) == 0x44) {
        return new FixLengthOpcode("fstore_1", value, pos);
    if((value & 0xff) == 0x45) {
        return new FixLengthOpcode("fstore_2", value, pos);
    if((value & 0xff) == 0x46) {
        return new FixLengthOpcode("fstore_3", value, pos);
    if((value & 0xff) == 0x66) {
        return new FixLengthOpcode("fsub", value, pos);
    if((value & 0xff) == 0xb4) {
        return new FixLengthOpcode("getfield", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0xb2) {
        return new FixLengthOpcode("getstatic", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0xa7) {
        return new FixLengthOpcode("goto", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0xc8) {
        return new FixLengthOpcode("goto_w", value, new byte[]{values[pos + 1], values[pos + 2], values[pos + 3], values[pos + 4]},pos);
    if((value & 0xff) == 0x91) {
        return new FixLengthOpcode("i2b", value, pos);
    if((value & 0xff) == 0x92) {
        return new FixLengthOpcode("i2c", value, pos);
    if((value & 0xff) == 0x87) {
        return new FixLengthOpcode("i2d", value, pos);
    if((value & 0xff) == 0x86) {
        return new FixLengthOpcode("i2f", value, pos);
    if((value & 0xff) == 0x85) {
        return new FixLengthOpcode("i2l", value, pos);
    if((value & 0xff) == 0x93) {
        return new FixLengthOpcode("i2s", value, pos);
    if((value & 0xff) == 0x60) {
        return new FixLengthOpcode("iadd", value, pos);
    if((value & 0xff) == 0x2e) {
        return new FixLengthOpcode("iaload", value, pos);
    if((value & 0xff) == 0x7e) {
        return new FixLengthOpcode("iand", value, pos);
    if((value & 0xff) == 0x4f) {
        return new FixLengthOpcode("iastore", value, pos);
    if((value & 0xff) == 0x2) {
        return new FixLengthOpcode("iconst_m1", value, pos);
    if((value & 0xff) == 0x3) {
        return new FixLengthOpcode("iconst_0", value, pos);
    if((value & 0xff) == 0x4) {
        return new FixLengthOpcode("iconst_1", value, pos);
    if((value & 0xff) == 0x5) {
        return new FixLengthOpcode("iconst_2", value, pos);
    if((value & 0xff) == 0x6) {
        return new FixLengthOpcode("iconst_3", value, pos);
    if((value & 0xff) == 0x7) {
        return new FixLengthOpcode("iconst_4", value, pos);
    if((value & 0xff) == 0x8) {
        return new FixLengthOpcode("iconst_5", value, pos);
    if((value & 0xff) == 0x6c) {
        return new FixLengthOpcode("idiv", value, pos);
    if((value & 0xff) == 0xa5) {
        return new FixLengthOpcode("if_acmpeq", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0xa6) {
        return new FixLengthOpcode("if_acmpne", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0x9f) {
        return new FixLengthOpcode("if_icmpeq", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0xa0) {
        return new FixLengthOpcode("if_icmpne", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0xa1) {
        return new FixLengthOpcode("if_icmplt", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0xa2) {
        return new FixLengthOpcode("if_icmpge", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0xa3) {
        return new FixLengthOpcode("if_icmpgt", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0xa4) {
        return new FixLengthOpcode("if_icmple", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0x99) {
        return new FixLengthOpcode("ifeq", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0x9a) {
        return new FixLengthOpcode("ifne", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0x9b) {
        return new FixLengthOpcode("iflt", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0x9c) {
        return new FixLengthOpcode("ifge", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0x9d) {
        return new FixLengthOpcode("ifgt", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0x9e) {
        return new FixLengthOpcode("ifle", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0xc7) {
        return new FixLengthOpcode("ifnonull", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0xc6) {
        return new FixLengthOpcode("ifnull", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0x84) {
        return new FixLengthOpcode("iinc", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0x15) {
        return new FixLengthOpcode("iload", value, new byte[]{values[pos + 1]},pos);
    if((value & 0xff) == 0x1a) {
        return new FixLengthOpcode("iload_0", value, pos);
    if((value & 0xff) == 0x1b) {
        return new FixLengthOpcode("iload_1", value, pos);
    if((value & 0xff) == 0x1c) {
        return new FixLengthOpcode("iload_2", value, pos);
    if((value & 0xff) == 0x1d) {
        return new FixLengthOpcode("iload_3", value, pos);
    if((value & 0xff) == 0x68) {
        return new FixLengthOpcode("imul", value, pos);
    if((value & 0xff) == 0x74) {
        return new FixLengthOpcode("ineg", value, pos);
    if((value & 0xff) == 0xc1) {
        return new FixLengthOpcode("instanceof", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0xba) {
        return new FixLengthOpcode("invokedynamic", value, new byte[]{values[pos + 1], values[pos + 2], values[pos + 3], values[pos + 4]},pos);
    if((value & 0xff) == 0xb9) {
        return new FixLengthOpcode("invokeinterface", value, new byte[]{values[pos + 1], values[pos + 2], values[pos + 3], values[pos + 4]},pos);
    if((value & 0xff) == 0xb7) {
        return new FixLengthOpcode("invokespecial", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0xb8) {
        return new FixLengthOpcode("invokestatic", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0xb6) {
        return new FixLengthOpcode("invokevirtual", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0x80) {
        return new FixLengthOpcode("ior", value, pos);
    if((value & 0xff) == 0x70) {
        return new FixLengthOpcode("irem", value, pos);
    if((value & 0xff) == 0xac) {
        return new FixLengthOpcode("ireturn", value, pos);
    if((value & 0xff) == 0x78) {
        return new FixLengthOpcode("ishl", value, pos);
    if((value & 0xff) == 0x36) {
        return new FixLengthOpcode("istore", value, new byte[]{values[pos + 1]},pos);
    if((value & 0xff) == 0x3b) {
        return new FixLengthOpcode("istore_0", value, pos);
    if((value & 0xff) == 0x3c) {
        return new FixLengthOpcode("istore_1", value, pos);
    if((value & 0xff) == 0x3d) {
        return new FixLengthOpcode("istore_2", value, pos);
    if((value & 0xff) == 0x3e) {
        return new FixLengthOpcode("istore_3", value, pos);
    if((value & 0xff) == 0x64) {
        return new FixLengthOpcode("isub", value, pos);
    if((value & 0xff) == 0x7c) {
        return new FixLengthOpcode("iushr", value, pos);
    if((value & 0xff) == 0x82) {
        return new FixLengthOpcode("ixor", value, pos);
    if((value & 0xff) == 0xa8) {
        return new FixLengthOpcode("jsr", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0xc9) {
        return new FixLengthOpcode("jsr_w", value, new byte[]{values[pos + 1], values[pos + 2], values[pos + 3], values[pos + 4]},pos);
    if((value & 0xff) == 0x8a) {
        return new FixLengthOpcode("i2d", value, pos);
    if((value & 0xff) == 0x89) {
        return new FixLengthOpcode("l2f", value, pos);
    if((value & 0xff) == 0x88) {
        return new FixLengthOpcode("l2i", value, pos);
    if((value & 0xff) == 0x61) {
        return new FixLengthOpcode("ladd", value, pos);
    if((value & 0xff) == 0x2f) {
        return new FixLengthOpcode("laload", value, pos);
    if((value & 0xff) == 0x7f) {
        return new FixLengthOpcode("land", value, pos);
    if((value & 0xff) == 0x50) {
        return new FixLengthOpcode("lastore", value, pos);
    if((value & 0xff) == 0x94) {
        return new FixLengthOpcode("lcmp", value, pos);
    if((value & 0xff) == 0x9) {
        return new FixLengthOpcode("lconst_0", value, pos);
    if((value & 0xff) == 0xa) {
        return new FixLengthOpcode("lconst_1", value, pos);
    if((value & 0xff) == 0x12) {
        return new FixLengthOpcode("ldc", value, new byte[]{values[pos + 1]},pos);
    if((value & 0xff) == 0x13) {
        return new FixLengthOpcode("ldc_w", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0x14) {
        return new FixLengthOpcode("ldc2_w", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0x6d) {
        return new FixLengthOpcode("ldiv", value, pos);
    if((value & 0xff) == 0x16) {
        return new FixLengthOpcode("lload", value, new byte[]{values[pos + 1]},pos);
    if((value & 0xff) == 0x1e) {
        return new FixLengthOpcode("lload_0", value, pos);
    if((value & 0xff) == 0x1f) {
        return new FixLengthOpcode("lload_1", value, pos);
    if((value & 0xff) == 0x20) {
        return new FixLengthOpcode("lload_2", value, pos);
    if((value & 0xff) == 0x21) {
        return new FixLengthOpcode("lload_3", value, pos);
    if((value & 0xff) == 0x69) {
        return new FixLengthOpcode("lmul", value, pos);
    if((value & 0xff) == 0x75) {
        return new FixLengthOpcode("lneg", value, pos);
    if((value & 0xff) == 0x81) {
        return new FixLengthOpcode("lor", value, pos);
    if((value & 0xff) == 0x71) {
        return new FixLengthOpcode("lrem", value, pos);
    if((value & 0xff) == 0xad) {
        return new FixLengthOpcode("lreturn", value, pos);
    if((value & 0xff) == 0x79) {
        return new FixLengthOpcode("lshl", value, pos);
    if((value & 0xff) == 0x7b) {
        return new FixLengthOpcode("lshr", value, pos);
    if((value & 0xff) == 0x37) {
        return new FixLengthOpcode("lstore", value, new byte[]{values[pos + 1]},pos);
    if((value & 0xff) == 0x3f) {
        return new FixLengthOpcode("lstore_0", value, pos);
    if((value & 0xff) == 0x40) {
        return new FixLengthOpcode("lstore_1", value, pos);
    if((value & 0xff) == 0x41) {
        return new FixLengthOpcode("lstore_2", value, pos);
    if((value & 0xff) == 0x42) {
        return new FixLengthOpcode("lstore_3", value, pos);
    if((value & 0xff) == 0x65) {
        return new FixLengthOpcode("lsub", value, pos);
    if((value & 0xff) == 0x7d) {
        return new FixLengthOpcode("lushr", value, pos);
    if((value & 0xff) == 0x83) {
        return new FixLengthOpcode("lxor", value, pos);
    if((value & 0xff) == 0xc2) {
        return new FixLengthOpcode("monitorenter", value, pos);
    if((value & 0xff) == 0xc3) {
        return new FixLengthOpcode("monitorexit", value, pos);
    if((value & 0xff) == 0xc5) {
        return new FixLengthOpcode("multianewarray", value, new byte[]{values[pos + 1], values[pos + 2], values[pos + 3]},pos);
    if((value & 0xff) == 0xbb) {
        return new FixLengthOpcode("new", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0xbc) {
        return new FixLengthOpcode("newarray", value, new byte[]{values[pos + 1]},pos);
    if((value & 0xff) == 0x0) {
        return new FixLengthOpcode("nop", value, pos);
    if((value & 0xff) == 0x57) {
        return new FixLengthOpcode("pop", value, pos);
    if((value & 0xff) == 0x58) {
        return new FixLengthOpcode("pop2", value, pos);
    if((value & 0xff) == 0xb5) {
        return new FixLengthOpcode("putfield", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0xb3) {
        return new FixLengthOpcode("putstatic", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0xa9) {
        return new FixLengthOpcode("ret", value, new byte[]{values[pos + 1]},pos);
    if((value & 0xff) == 0xb1) {
        return new FixLengthOpcode("return", value, pos);
    if((value & 0xff) == 0x35) {
        return new FixLengthOpcode("saload", value, pos);
    if((value & 0xff) == 0x56) {
        return new FixLengthOpcode("satore", value, pos);
    if((value & 0xff) == 0x11) {
        return new FixLengthOpcode("sipush", value, new byte[]{values[pos + 1], values[pos + 2]},pos);
    if((value & 0xff) == 0x5f) {
        return new FixLengthOpcode("swap", value, pos);
    throw new ClassFormatError("Unknown Opcode: " + Integer.toHexString(value & 0xff));
}